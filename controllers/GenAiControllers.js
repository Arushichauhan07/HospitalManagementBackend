// controllers/aiController.js
const { GoogleGenerativeAI } = require("@google/generative-ai");
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

exports.checkDrugInteractions = async (req, res) => {
    try {
      const { medications } = req.body;
  
      if (!medications || medications.length < 2) {
        return res.status(400).json({ error: "At least two medications are required for interaction check." });
      }
  
      const prompt = `
      You are a highly skilled clinical AI assistant. A patient is currently prescribed the following medications:
      
      ${medications.join(", ")}
      
      Your task:
      
      1. Identify any potential **drug interactions** among the listed medications.
      2. For each interaction, provide the following:
         - **medicationsInvolved**: Names of the drugs in interaction
         - **severity**: Mild, Moderate, or Severe
         - **details**: A clear explanation of the interaction
         - **recommendation**: Clinical advice such as substitution, monitoring, or dose change
      3. For each drug involved in a **Moderate or Severe** interaction, suggest **safe alternative medications** that serve the same therapeutic purpose and **avoid the interaction**.
      
      
      
    4. must return the response in this **strict JSON format** only — no explanation, no markdown:
      
      {
        "interactions": [
          {
            "medicationsInvolved": "Drug A + Drug B",
            "severity": "Moderate",
            "details": "Short and concise Description of the interaction",
            "recommendation": "Short and concise Clinical recommendation",
            "alternatives": [
              {
                "original": "Drug A",
                "alternatives": ["Alternative A1", "Alternative A2"] 
              },
              {
                "original": "Drug B",
                "alternatives": ["Alternative B1"]
              }
            ]
          }
        ]
      }
      `;
      
      
      
  
      const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash-thinking-exp-01-21" });
      const result = await model.generateContent(prompt);
      const response = result.response;
      let rawText = response.text();

      // Remove markdown-style code block wrapping if present
      rawText = rawText.replace(/```json|```/g, "").trim();
      
      let parsed;
      try {
        parsed = JSON.parse(rawText);
      } catch (err) {
        // console.error("❌ JSON parse failed:", err);
        return res.status(500).json({ error: "Failed to parse AI response", raw: rawText });
      }
  
      // console.log("parsed", parsed)
      res.json(parsed);
    } catch (error) {
      // console.error("❌ Error in interaction check:", error);
      res.status(500).json({ error: "Internal server error" });
    }
  };
  
  
// exports.analyzeLabTest = async (req, res) => {
//   try {
//     const { testName, testType, parameters, patient, priority, notes } = req.body;

//     if (!parameters || parameters.length === 0) {
//       return res.status(400).json({ error: "Lab parameters are required for analysis." });
//     }

//     const prompt = `
// You are a highly skilled AI clinical diagnostics assistant. A lab test has been conducted with the following details:

// - Test Name: ${testName}
// - Test Type: ${testType}
// - Patient Info: ${patient?.name || "N/A"}, Age: ${patient?.age || "N/A"}, Gender: ${patient?.gender || "N/A"}
// - Priority: ${priority || "Normal"}
// - Notes from Doctor: ${notes || "None"}

// Lab Test Parameters and Results:
// ${parameters.map(p => `- ${p.name}: ${p.value} ${p.unit || ""}`).join("\n")}

// Your tasks:
// 1. Analyze the test for diagnostic insights.
// 2. Identify any anomalies or abnormal values and describe their clinical relevance.
// 3. Detect pattern similarities to common diseases/conditions.
// 4. Generate an automated medical report summary.

// Respond in this **strict JSON format** only (no markdown, no extra text):

// {
//   "summary": "Short high-level summary of the findings",
//   "insights": ["Key clinical insight 1", "Key clinical insight 2"],
//   "accuracy": 98.7,
//   "processingTimeReduction": -67,
//   "anomalies": ["Parameter 1", "Parameter 2"],
//   "patterns": ["Detected pattern 1", "Detected pattern 2"],
//   "autoGeneratedReport": "Concise AI-generated diagnostic report."
// }
//     `;

//     const model = genAI.getGenerativeModel({ model: "gemini-1.5-pro" });
//     const result = await model.generateContent(prompt);
//     const response = result.response;
//     let rawText = response.text();

//     // Clean up markdown/code blocks if present
//     rawText = rawText.replace(/```json|```/g, "").trim();

//     let parsed;
//     try {
//       parsed = JSON.parse(rawText);
//     } catch (err) {
//       console.error("❌ JSON parse failed:", err);
//       return res.status(500).json({ error: "Failed to parse AI response", raw: rawText });
//     }

//     console.log("✅ AI Lab Analysis Result:", parsed);
//     res.json(parsed);
//   } catch (error) {
//     console.error("❌ Error in lab test analysis:", error);
//     res.status(500).json({ error: "Internal server error" });
//   }
// };


exports.analyzeLabTest = async (test) => {
  const testName = test.testName;
  const testType = test.labTest?.testType || "N/A"; // If you have testType
  const parameters = test.results; // from your sample data
  const patient = test.patientId;
  const priority = test.labTest?.Priority || "Normal";
  const notes = test.labTest?.notes || "None";

  if (!parameters || parameters.length === 0) {
    throw new Error("Lab parameters are required for analysis.");
  }

  const prompt = `
You are a highly skilled AI clinical diagnostics assistant. A lab test has been conducted with the following details:

- Test Name: ${testName}
- Test Type: ${testType}
- Patient Info: ${patient?.name || "N/A"}, Age: ${patient?.dateOfBirth ? new Date().getFullYear() - new Date(patient.dateOfBirth).getFullYear() : "N/A"}, Gender: ${patient?.gender || "N/A"}
- Priority: ${priority}
- Notes from Doctor: ${notes}

Lab Test Parameters and Results:
${parameters.map(p => `- ${p.parameter}: ${p.value} ${p.unit || ""}`).join("\n")}

Your tasks:
1. Analyze the test for diagnostic insights.
2. Identify any anomalies or abnormal values and describe their clinical relevance.
3. Detect pattern similarities to common diseases/conditions.
4. Generate an automated medical report summary.

Respond in this **strict JSON format** only (no markdown, no extra text):

{
  "summary": "Short high-level summary of the findings",
  "insights": ["Key clinical insight 1", "Key clinical insight 2"],
  "accuracy": 98.7,
  "processingTimeReduction": -67,
  "anomalies": ["Parameter 1", "Parameter 2"],
  "patterns": ["Detected pattern 1", "Detected pattern 2"],
  "autoGeneratedReport": "Concise AI-generated diagnostic report."
}
`;

  const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash-thinking-exp-01-21" });
  const result = await model.generateContent(prompt);
  const response = result.response;
  let rawText = response.text();

  rawText = rawText.replace(/```json|```/g, "").trim();

  try {
    return JSON.parse(rawText);
  } catch (err) {
    // console.error("❌ JSON parse failed:", err);
    throw new Error("Failed to parse AI response");
  }
};
